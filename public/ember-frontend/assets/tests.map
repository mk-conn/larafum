{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ember-larafum/tests/app.lint-test.js","ember-larafum/tests/helpers/destroy-app.js","ember-larafum/tests/helpers/ember-simple-auth.js","ember-larafum/tests/helpers/module-for-acceptance.js","ember-larafum/tests/helpers/resolver.js","ember-larafum/tests/helpers/start-app.js","ember-larafum/tests/integration/components/article-item/component-test.js","ember-larafum/tests/integration/components/feed-item/component-test.js","ember-larafum/tests/integration/components/folder-item/component-test.js","ember-larafum/tests/test-helper.js","ember-larafum/tests/tests.lint-test.js","ember-larafum/tests/unit/application/adapter-test.js","ember-larafum/tests/unit/application/route-test.js","ember-larafum/tests/unit/feeds/feed/articles/article/route-test.js","ember-larafum/tests/unit/feeds/feed/articles/controller-test.js","ember-larafum/tests/unit/feeds/feed/articles/route-test.js","ember-larafum/tests/unit/feeds/feed/route-test.js","ember-larafum/tests/unit/feeds/route-test.js","ember-larafum/tests/unit/index/route-test.js","ember-larafum/tests/unit/initializers/current-user-test.js","ember-larafum/tests/unit/login/controller-test.js","ember-larafum/tests/unit/login/route-test.js","ember-larafum/tests/unit/models/article-test.js","ember-larafum/tests/unit/models/feed-test.js","ember-larafum/tests/unit/models/folder-test.js","ember-larafum/tests/unit/models/setting-test.js","ember-larafum/tests/unit/models/user-test.js","ember-larafum/tests/unit/serializers/feed-test.js","ember-larafum/tests/unit/services/current-user-test.js","ember-larafum/tests/unit/settings/route-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('ember-larafum/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('application/adapter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/adapter.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('application/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/article-item/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/article-item/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/feed-item/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/feed-item/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/folder-item/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/folder-item/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('feeds/feed/articles/article/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'feeds/feed/articles/article/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('feeds/feed/articles/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'feeds/feed/articles/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('feeds/feed/articles/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'feeds/feed/articles/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('feeds/feed/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'feeds/feed/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('feeds/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'feeds/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('index/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'index/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/current-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/current-user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('login/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'login/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('login/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'login/route.js should pass ESLint\\n\\n4:24 - \\'service\\' is assigned a value but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('models/article.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/article.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/feed.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/feed.js should pass ESLint\\n\\n3:8 - \\'Model\\' is assigned a value but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('models/folder.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/folder.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/setting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/setting.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/feed.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/feed.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/current-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/current-user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('settings/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'settings/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transitions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transitions.js should pass ESLint\\n\\n');\n  });\n});","define('ember-larafum/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('ember-larafum/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  var TEST_CONTAINER_KEY = 'authenticator:test'; /* global wait */\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n});","define('ember-larafum/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember-larafum/tests/helpers/start-app', 'ember-larafum/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('ember-larafum/tests/helpers/resolver', ['exports', 'ember-larafum/resolver', 'ember-larafum/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('ember-larafum/tests/helpers/start-app', ['exports', 'ember-larafum/app', 'ember-larafum/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('ember-larafum/tests/integration/components/article-item/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('article-item', 'Integration | Component | article item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kBqgHR87\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"article-item\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"FwPwMS2S\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"article-item\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-larafum/tests/integration/components/feed-item/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('feed-item', 'Integration | Component | feed item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"PjpfwjTm\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"feed-item\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"d9HBSQ/N\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"feed-item\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-larafum/tests/integration/components/folder-item/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('folder-item', 'Integration | Component | folder item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"TAl5v2hX\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"folder-item\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"VZRiaLtE\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"folder-item\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-larafum/tests/test-helper', ['ember-larafum/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('ember-larafum/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/article-item/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/article-item/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/feed-item/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/feed-item/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/folder-item/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/folder-item/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/application/adapter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/adapter-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/application/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feeds/feed/articles/article/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feeds/feed/articles/article/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feeds/feed/articles/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feeds/feed/articles/controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feeds/feed/articles/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feeds/feed/articles/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feeds/feed/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feeds/feed/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feeds/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feeds/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/index/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/index/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/current-user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/current-user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/login/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/login/controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/login/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/login/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/article-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/article-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/feed-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/feed-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/folder-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/folder-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/setting-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/setting-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/feed-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/feed-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/current-user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/current-user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/settings/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/settings/route-test.js should pass ESLint\\n\\n');\n  });\n});","define('ember-larafum/tests/unit/application/adapter-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('ember-larafum/tests/unit/application/route-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-larafum/tests/unit/feeds/feed/articles/article/route-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:feeds/feed/articles/article', 'Unit | Route | feeds/feed/articles/article', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-larafum/tests/unit/feeds/feed/articles/controller-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:feeds/feed/articles', 'Unit | Controller | feeds/feed/articles', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('ember-larafum/tests/unit/feeds/feed/articles/route-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:feeds/feed/articles', 'Unit | Route | feeds/feed/articles', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-larafum/tests/unit/feeds/feed/route-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:feeds/feed', 'Unit | Route | feeds/feed', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-larafum/tests/unit/feeds/route-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:feeds', 'Unit | Route | feeds', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-larafum/tests/unit/index/route-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-larafum/tests/unit/initializers/current-user-test', ['ember-larafum/initializers/current-user', 'qunit', 'ember-larafum/tests/helpers/destroy-app'], function (_currentUser, _qunit, _destroyApp) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Initializer | current user', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      Ember.run(function () {\n        _this.application = Ember.Application.create();\n        _this.application.deferReadiness();\n      });\n    },\n    afterEach: function afterEach() {\n      (0, _destroyApp.default)(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _currentUser.initialize)(this.application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('ember-larafum/tests/unit/login/controller-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:login', 'Unit | Controller | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('ember-larafum/tests/unit/login/route-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-larafum/tests/unit/models/article-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('article', 'Unit | Model | article', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ember-larafum/tests/unit/models/feed-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('feed', 'Unit | Model | feed', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ember-larafum/tests/unit/models/folder-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('folder', 'Unit | Model | folder', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ember-larafum/tests/unit/models/setting-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('setting', 'Unit | Model | setting', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ember-larafum/tests/unit/models/user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ember-larafum/tests/unit/serializers/feed-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('feed', 'Unit | Serializer | feed', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:feed']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('ember-larafum/tests/unit/services/current-user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:current-user', 'Unit | Service | current user', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('ember-larafum/tests/unit/settings/route-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:settings', 'Unit | Route | settings', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('ember-larafum/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;","file":"tests.js"}